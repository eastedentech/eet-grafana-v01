sources:
  socket_udp5114:
    type: socket
    address: '0.0.0.0:5114'
    mode: udp

# transforms:
#   socket_udp5114_parse:
#     type: remap
#     inputs:
#       - socket_udp5114
#     source: |
#       parsed, err = parse_syslog(.message)
#       if err == null {
#         . |= parsed
#       }

transforms:
  socket_udp5114_parse:
    type: remap
    inputs:
      - socket_udp5114
    source: |
      parsed, err = parse_groks(
        .message ,
        patterns: [
          # Firewall Grok Pattern
          "<%{NUMBER:priority}>%{NUMBER:version} %{NUMBER:epoch_time} %{WORD:hostname} %{WORD:meraki_log_type} src=%{IPV4:src} dst=%{IPV4:dst}( mac=%{MAC:mac})? protocol=%{WORD:protocol}( sport=%{NUMBER:src_port})?( dport=%{NUMBER:dst_port})?( type=%{NUMBER:type})? pattern: %{GREEDYDATA:pattern}",
          # IP_Flow Grok Pattern
          "<%{NUMBER:priority}>%{NUMBER:version} %{NUMBER:epoch_time} %{WORD:hostname} %{WORD:meraki_log_type} src=%{IPV4:src} dst=%{IPV4:dst} protocol=%{WORD:protocol}( sport=%{NUMBER:src_port})?( dport=%{NUMBER:dst_port})?( translated_src_ip=%{IPV4:translated_src_ip})?( translated_dst_ip=%{IPV4:translated_dst_ip})?( translated_port=%{NUMBER:translated_port})?",
          # URL Grok Pattern
          "<%{NUMBER:priority}>%{NUMBER:version} %{NUMBER:epoch_time} %{WORD:hostname} %{WORD:meraki_log_type} src=%{HOSTPORT:src} dst=%{HOSTPORT:dst} mac=%{MAC:mac}( agent=%{QUOTEDSTRING:agent})? request: %{WORD:request_type} %{GREEDYDATA:url}"
        ]
      )
      if err == null {
        . |= parsed
      }

# transforms:
#   socket_udp5114_parse:
#     type: remap
#     inputs:
#       - socket_udp5114
#     source: '''
#       . |= parse_groks!(
#         .message ,
#         patterns: [
#           "<%{NUMBER:priority}>%{NUMBER:version} %{NUMBER:epoch_time} %{WORD:hostname} %{WORD:meraki_log_type} src=%{IPV4:src} dst=%{IPV4:dst} protocol=%{WORD:protocol} sport=%{NUMBER:src_port} dport=%{NUMBER:dst_port} pattern: %{GREEDYDATA:pattern}",
#           "<%{NUMBER:priority}>%{NUMBER:version} %{NUMBER:epoch_time} %{WORD:hostname} %{WORD:meraki_log_type} src=%{IPV4:src} dst=%{IPV4:dst} protocol=%{WORD:protocol} sport=%{NUMBER:src_port} dport=%{NUMBER:dst_port} translated_src_ip=%{IPV4:translated_src_ip} translated_port=%{NUMBER:translated_port}",
#           "<%{NUMBER:priority}>%{NUMBER:version} %{NUMBER:epoch_time} %{WORD:hostname} %{WORD:meraki_log_type} src=%{HOSTPORT:src} dst=%{HOSTPORT:dst} mac=%{MAC:mac} request: %{WORD:request_type} %{GREEDYDATA:url}"
#         ]
#       )
#     '''

sinks:
  socket_udp5114_loki:
    type: loki
    inputs:
      - socket_udp5114_parse
    endpoint: 'http://loki:3100'
    encoding:
      codec: json
    path: /loki/api/v1/push
    # remove_label_fields: true
    labels:
      # host: '{{host}}'
      # port: '{{port}}'
      # source_type: '{{source_type}}'
      hostname: '{{hostname}}'
      meraki_log_type: '{{meraki_log_type}}'

# sinks:
#   socket_udp5114_loki:
#     type: loki
#     inputs:
#       - socket_udp5114_parse
#     endpoint: 'http://loki:3100'
#     encoding:
#       codec: json
#     path: /loki/api/v1/push
#     remove_label_fields: true
#     labels:
#       host: '{{host}}'
#       port: '{{port}}'
#       source_type: '{{source_type}}'
#       priority: '{{priority}}'
#       version: '{{version}}'
#       epoch_time: '{{epoch_time}}'
#       hostname: '{{hostname}}'
#       meraki_log_type: '{{meraki_log_type}}'
#       src: '{{src}}'
#       dst: '{{dst}}'
#       protocol: '{{protocol}}'
#       src_port: '{{src_port}}'
#       dst_port: '{{dst_port}}'
#       pattern: '{{pattern}}'
#       translated_src_ip: '{{translated_src_ip}}'
#       translated_port: '{{translated_port}}'
